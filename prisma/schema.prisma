// This is your Prisma schema file
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String         @id @default(cuid())
    name          String?
    username      String?        @unique
    email         String         @unique
    password      String
    phone         String?
    image         String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @default(now()) @updatedAt
    categories    Category[]
    timeEntries   TimeEntry[]
    todos         Todo[]
    collaborators Collaborator[]
    TodoHistory   TodoHistory[]

    // Friend system
    sentFriendRequests     Friendship[] @relation("requester")
    receivedFriendRequests Friendship[] @relation("addressee")

    // Messages
    sentMessages     Message[] @relation("sender")
    receivedMessages Message[] @relation("receiver")

    // Diet tracking
    foods Food[]
    meals Meal[]

    @@index([username])
}

model Todo {
    id             String         @id @default(cuid())
    title          String
    description    String
    done           Boolean        @default(false)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @default(now()) @updatedAt
    user           User           @relation(fields: [userId], references: [id])
    userId         String
    todoColor      String         @default("")
    images         Image[] // Relation to the Image model
    collaborators  Collaborator[]
    lastModifiedBy String         @default("")
    TodoHistory    TodoHistory[]
}

model TodoHistory {
    id             String         @id @default(uuid())
    todoId         String
    title          String?
    description    String?
    done           Boolean?
    todoColor      String?
    lastModifiedBy String
    createdAt      DateTime       @default(now())
    collaborators  Collaborator[]
    userId         String?
    user           User?          @relation(fields: [userId], references: [id])
    Todo           Todo           @relation(fields: [todoId], references: [id], onDelete: Cascade)

    @@index([todoId])
}

model Image {
    id            String   @id @default(cuid())
    url           String
    todo          Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
    todoId        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt
    todoHistoryId String?
}

model Collaborator {
    id            String       @id @default(cuid())
    user          User         @relation(fields: [userId], references: [id])
    userId        String
    todo          Todo         @relation(fields: [todoId], references: [id], onDelete: Cascade)
    todoId        String
    isOwner       Boolean      @default(false)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @default(now()) @updatedAt
    TodoHistory   TodoHistory? @relation(fields: [todoHistoryId], references: [id])
    todoHistoryId String?

    @@unique([userId, todoId])
}

model Category {
    id          String      @id @default(cuid())
    name        String
    color       String
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    timeEntries TimeEntry[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([userId])
}

model TimeEntry {
    id          String   @id @default(cuid())
    title       String
    description String?
    startTime   DateTime
    endTime     DateTime
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([userId])
    @@index([categoryId])
}

model Friendship {
    id          String           @id @default(cuid())
    requesterId String
    addresseeId String
    status      FriendshipStatus @default(PENDING)
    requester   User             @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
    addressee   User             @relation("addressee", fields: [addresseeId], references: [id], onDelete: Cascade)
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt

    @@index([requesterId, addresseeId])
}

model Message {
    id         String   @id @default(cuid())
    content    String
    senderId   String
    receiverId String
    read       Boolean  @default(false)
    sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([senderId, receiverId])
}

model Food {
    id          String     @id @default(cuid())
    name        String
    calories    Int
    protein     Float
    carbs       Float
    fats        Float
    fiber       Float
    servingSize Float
    servingUnit String
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    mealFoods   MealFood[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@index([userId])
}

model Meal {
    id        String     @id @default(cuid())
    name      String
    date      DateTime
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    mealFoods MealFood[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@index([userId])
}

model MealFood {
    id        String   @id @default(cuid())
    mealId    String
    foodId    String
    servings  Float
    meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
    food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([mealId])
    @@index([foodId])
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    REJECTED
}
